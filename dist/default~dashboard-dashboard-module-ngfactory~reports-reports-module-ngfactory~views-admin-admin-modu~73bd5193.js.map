{"version":3,"sources":["webpack:///./node_modules/@coreui/coreui-plugin-chartjs-custom-tooltips/dist/umd/custom-tooltips.js","webpack:///./node_modules/chartjs-plugin-labels/src/chartjs-plugin-labels.js","webpack:///./src/app/views/admin/_components/doughnut-chart/doughnut-chart.component.html","webpack:///./src/app/views/admin/_components/doughnut-chart/doughnut-chart.component.ts","webpack:///./src/app/views/admin/_components/line-chart/line-chart.component.html","webpack:///./src/app/views/admin/_components/line-chart/line-chart.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA,EAAE,KAA4D;AAC9D,EAAE,SAC2C;AAC7C,CAAC,4BAA4B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;;AAGL;AACA;AACA;AACA,KAAK;;;AAGL;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA,kDAAkD;;AAElD;AACA;AACA;AACA;;AAEA,sCAAsC;;AAEtC;AACA;;AAEA,gDAAgD,cAAc;;AAE9D,CAAC;AACD;;;;;;;;;;;;ACzIA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB,oCAAoC;AAC3D;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,cAAc;AACd,KAAK;AACL;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4GCzeA,qOAE2B,YAA1B;;wBAAyB;MAF1B,wBAE2B,0JAA+B,KAAI,8EAAM,MAAU,6NAA2E,YAAxB;;wBAAuB;MAA1E,wBAA2E,0JAA+B,KAAI,4EAAI,MAAW,iJAA2B,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","file":"default~dashboard-dashboard-module-ngfactory~reports-reports-module-ngfactory~views-admin-admin-modu~73bd5193.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global['custom-tooltips'] = {})));\n}(this, (function (exports) { 'use strict';\n\n  /**\n   * --------------------------------------------------------------------------\n   * CoreUI Plugins - Custom Tooltips for Chart.js (v1.2.0): custom-tooltips.js\n   * Licensed under MIT (https://coreui.io/license)\n   * --------------------------------------------------------------------------\n   */\n  function CustomTooltips(tooltipModel) {\n    var _this = this;\n\n    // Add unique id if not exist\n    var _setCanvasId = function _setCanvasId() {\n      var _idMaker = function _idMaker() {\n        var _hex = 16;\n        var _multiplier = 0x10000;\n        return ((1 + Math.random()) * _multiplier | 0).toString(_hex);\n      };\n\n      var _canvasId = \"_canvas-\" + (_idMaker() + _idMaker());\n\n      _this._chart.canvas.id = _canvasId;\n      return _canvasId;\n    };\n\n    var ClassName = {\n      ABOVE: 'above',\n      BELOW: 'below',\n      CHARTJS_TOOLTIP: 'chartjs-tooltip',\n      NO_TRANSFORM: 'no-transform',\n      TOOLTIP_BODY: 'tooltip-body',\n      TOOLTIP_BODY_ITEM: 'tooltip-body-item',\n      TOOLTIP_BODY_ITEM_COLOR: 'tooltip-body-item-color',\n      TOOLTIP_BODY_ITEM_LABEL: 'tooltip-body-item-label',\n      TOOLTIP_BODY_ITEM_VALUE: 'tooltip-body-item-value',\n      TOOLTIP_HEADER: 'tooltip-header',\n      TOOLTIP_HEADER_ITEM: 'tooltip-header-item'\n    };\n    var Selector = {\n      DIV: 'div',\n      SPAN: 'span',\n      TOOLTIP: (this._chart.canvas.id || _setCanvasId()) + \"-tooltip\"\n    };\n    var tooltip = document.getElementById(Selector.TOOLTIP);\n\n    if (!tooltip) {\n      tooltip = document.createElement('div');\n      tooltip.id = Selector.TOOLTIP;\n      tooltip.className = ClassName.CHARTJS_TOOLTIP;\n\n      this._chart.canvas.parentNode.appendChild(tooltip);\n    } // Hide if no tooltip\n\n\n    if (tooltipModel.opacity === 0) {\n      tooltip.style.opacity = 0;\n      return;\n    } // Set caret Position\n\n\n    tooltip.classList.remove(ClassName.ABOVE, ClassName.BELOW, ClassName.NO_TRANSFORM);\n\n    if (tooltipModel.yAlign) {\n      tooltip.classList.add(tooltipModel.yAlign);\n    } else {\n      tooltip.classList.add(ClassName.NO_TRANSFORM);\n    } // Set Text\n\n\n    if (tooltipModel.body) {\n      var titleLines = tooltipModel.title || [];\n      var tooltipHeader = document.createElement(Selector.DIV);\n      tooltipHeader.className = ClassName.TOOLTIP_HEADER;\n      titleLines.forEach(function (title) {\n        var tooltipHeaderTitle = document.createElement(Selector.DIV);\n        tooltipHeaderTitle.className = ClassName.TOOLTIP_HEADER_ITEM;\n        tooltipHeaderTitle.innerHTML = title;\n        tooltipHeader.appendChild(tooltipHeaderTitle);\n      });\n      var tooltipBody = document.createElement(Selector.DIV);\n      tooltipBody.className = ClassName.TOOLTIP_BODY;\n      var tooltipBodyItems = tooltipModel.body.map(function (item) {\n        return item.lines;\n      });\n      tooltipBodyItems.forEach(function (item, i) {\n        var tooltipBodyItem = document.createElement(Selector.DIV);\n        tooltipBodyItem.className = ClassName.TOOLTIP_BODY_ITEM;\n        var colors = tooltipModel.labelColors[i];\n        var tooltipBodyItemColor = document.createElement(Selector.SPAN);\n        tooltipBodyItemColor.className = ClassName.TOOLTIP_BODY_ITEM_COLOR;\n        tooltipBodyItemColor.style.backgroundColor = colors.backgroundColor;\n        tooltipBodyItem.appendChild(tooltipBodyItemColor);\n\n        if (item[0].split(':').length > 1) {\n          var tooltipBodyItemLabel = document.createElement(Selector.SPAN);\n          tooltipBodyItemLabel.className = ClassName.TOOLTIP_BODY_ITEM_LABEL;\n          tooltipBodyItemLabel.innerHTML = item[0].split(': ')[0];\n          tooltipBodyItem.appendChild(tooltipBodyItemLabel);\n          var tooltipBodyItemValue = document.createElement(Selector.SPAN);\n          tooltipBodyItemValue.className = ClassName.TOOLTIP_BODY_ITEM_VALUE;\n          tooltipBodyItemValue.innerHTML = item[0].split(': ').pop();\n          tooltipBodyItem.appendChild(tooltipBodyItemValue);\n        } else {\n          var _tooltipBodyItemValue = document.createElement(Selector.SPAN);\n\n          _tooltipBodyItemValue.className = ClassName.TOOLTIP_BODY_ITEM_VALUE;\n          _tooltipBodyItemValue.innerHTML = item[0];\n          tooltipBodyItem.appendChild(_tooltipBodyItemValue);\n        }\n\n        tooltipBody.appendChild(tooltipBodyItem);\n      });\n      tooltip.innerHTML = '';\n      tooltip.appendChild(tooltipHeader);\n      tooltip.appendChild(tooltipBody);\n    }\n\n    var positionY = this._chart.canvas.offsetTop;\n    var positionX = this._chart.canvas.offsetLeft; // Display, position, and set styles for font\n\n    tooltip.style.opacity = 1;\n    tooltip.style.left = positionX + tooltipModel.caretX + \"px\";\n    tooltip.style.top = positionY + tooltipModel.caretY + \"px\";\n  }\n\n  var customTooltips = CustomTooltips; // TODO: camel-case\n\n  exports.CustomTooltips = CustomTooltips;\n  exports.customTooltips = customTooltips;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=custom-tooltips.js.map\n","/**\n * [chartjs-plugin-labels]{@link https://github.com/emn178/chartjs-plugin-labels}\n *\n * @version 1.1.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2017-2018\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  if (typeof Chart === 'undefined') {\n    console.error('Can not find Chart object.');\n    return;\n  }\n\n  if (typeof Object.assign != 'function') {\n    Object.assign = function (target, varArgs) {\n      if (target == null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n      var to = Object(target);\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n        if (nextSource != null) {\n          for (var nextKey in nextSource) {\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    };\n  }\n\n  var SUPPORTED_TYPES = {};\n  ['pie', 'doughnut', 'polarArea', 'bar'].forEach(function (t) {\n    SUPPORTED_TYPES[t] = true;\n  });\n\n  function Label() {\n    this.renderToDataset = this.renderToDataset.bind(this);\n  }\n\n  Label.prototype.setup = function (chart, options) {\n    this.chart = chart;\n    this.ctx = chart.ctx;\n    this.args = {};\n    this.barTotal = {};\n    var chartOptions = chart.config.options;\n    this.options = Object.assign({\n      position: 'default',\n      precision: 0,\n      fontSize: chartOptions.defaultFontSize,\n      fontColor: chartOptions.defaultFontColor,\n      fontStyle: chartOptions.defaultFontStyle,\n      fontFamily: chartOptions.defaultFontFamily,\n      shadowOffsetX: 3,\n      shadowOffsetY: 3,\n      shadowColor: 'rgba(0,0,0,0.3)',\n      shadowBlur: 6,\n      images: [],\n      outsidePadding: 2,\n      textMargin: 2,\n      overlap: true\n    }, options);\n    if (chart.config.type === 'bar') {\n      this.options.position = 'default';\n      this.options.arc = false;\n      this.options.overlap = true;\n    }\n  };\n\n  Label.prototype.render = function () {\n    this.labelBounds = [];\n    this.chart.data.datasets.forEach(this.renderToDataset);\n  };\n\n  Label.prototype.renderToDataset = function (dataset, index) {\n    this.totalPercentage = 0;\n    this.total = null;\n    var arg = this.args[index];\n    arg.meta.data.forEach(function (element, index) {\n      this.renderToElement(dataset, arg, element, index);\n    }.bind(this));\n  };\n\n  Label.prototype.renderToElement = function (dataset, arg, element, index) {\n    if (!this.shouldRenderToElement(arg.meta, element)) {\n      return;\n    }\n    this.percentage = null;\n    var label = this.getLabel(dataset, element, index);\n    if (!label) {\n      return;\n    }\n    var ctx = this.ctx;\n    ctx.save();\n    ctx.font = Chart.helpers.fontString(this.options.fontSize, this.options.fontStyle, this.options.fontFamily);\n    var renderInfo = this.getRenderInfo(element, label);\n    if (!this.drawable(element, label, renderInfo)) {\n      ctx.restore();\n      return;\n    }\n    ctx.beginPath();\n    ctx.fillStyle = this.getFontColor(dataset, element, index);\n    this.renderLabel(label, renderInfo);\n    ctx.restore();\n  };\n\n  Label.prototype.renderLabel = function (label, renderInfo) {\n    return this.options.arc ? this.renderArcLabel(label, renderInfo) : this.renderBaseLabel(label, renderInfo);\n  };\n\n  Label.prototype.renderBaseLabel = function (label, position) {\n    var ctx = this.ctx;\n    if (typeof label === 'object') {\n      ctx.drawImage(label, position.x - label.width / 2, position.y - label.height / 2, label.width, label.height);\n    } else {\n      ctx.save();\n      ctx.textBaseline = 'top';\n      ctx.textAlign = 'center';\n\n      if (this.options.textShadow) {\n        ctx.shadowOffsetX = this.options.shadowOffsetX;\n        ctx.shadowOffsetY = this.options.shadowOffsetY;\n        ctx.shadowColor = this.options.shadowColor;\n        ctx.shadowBlur = this.options.shadowBlur;\n      }\n\n      var lines = label.split('\\n');\n      for (var i = 0; i < lines.length; i++) {\n        var y = position.y - this.options.fontSize / 2 * lines.length + this.options.fontSize * i;\n        ctx.fillText(lines[i], position.x, y);\n      }\n      ctx.restore();\n    }\n  };\n\n  Label.prototype.renderArcLabel = function (label, renderInfo) {\n    var ctx = this.ctx, radius = renderInfo.radius, view = renderInfo.view;\n    ctx.save();\n    ctx.translate(view.x, view.y);\n    if (typeof label === 'string') {\n      ctx.rotate(renderInfo.startAngle);\n      ctx.textBaseline = 'middle';\n      ctx.textAlign = 'left';\n      var lines = label.split('\\n'), max = 0, widths = [], offset = 0;\n      if (this.options.position === 'border') {\n        offset = (lines.length - 1) * this.options.fontSize / 2;\n      }\n      for (var j = 0; j < lines.length; ++j) {\n        var mertrics = ctx.measureText(lines[j]);\n        if (mertrics.width > max) {\n          max = mertrics.width;\n        }\n        widths.push(mertrics.width);\n      }\n      for (var j = 0; j < lines.length; ++j) {\n        var line = lines[j];\n        var y = (lines.length - 1 - j) * -this.options.fontSize + offset;\n        ctx.save();\n        var padding = (max - widths[j]) / 2;\n        ctx.rotate(padding / radius);\n        for (var i = 0; i < line.length; i++) {\n          var char = line.charAt(i);\n          mertrics = ctx.measureText(char);\n          ctx.save();\n          ctx.translate(0, -1 * radius);\n          ctx.fillText(char, 0, y);\n          ctx.restore();\n          ctx.rotate(mertrics.width / radius);\n        }\n        ctx.restore();\n      }\n    } else {\n      ctx.rotate((view.startAngle + Math.PI / 2 + renderInfo.endAngle) / 2);\n      ctx.translate(0, -1 * radius);\n      this.renderLabel(label, { x: 0, y: 0 });\n    }\n    ctx.restore();\n  };\n\n  Label.prototype.shouldRenderToElement = function (meta, element) {\n    return !meta.hidden && !element.hidden && (\n      this.options.showZero ||\n      this.chart.config.type === 'polarArea' ? element._view.outerRadius !== 0 : element._view.circumference !== 0\n    );\n  };\n\n  Label.prototype.getLabel = function (dataset, element, index) {\n    var label;\n    if (typeof this.options.render === 'function') {\n      label = this.options.render({\n        label: this.chart.config.data.labels[index],\n        value: dataset.data[index],\n        percentage: this.getPercentage(dataset, element, index),\n        dataset: dataset,\n        index: index\n      });\n    } else {\n      switch (this.options.render) {\n        case 'value':\n          label = dataset.data[index];\n          break;\n        case 'label':\n          label = this.chart.config.data.labels[index];\n          break;\n        case 'image':\n          label = this.options.images[index] ? this.loadImage(this.options.images[index]) : '';\n          break;\n        case 'percentage':\n        default:\n          label = this.getPercentage(dataset, element, index) + '%';\n          break;\n      }\n    }\n    if (typeof label === 'object') {\n      label = this.loadImage(label);\n    } else if (label !== null && label !== undefined) {\n      label = label.toString();\n    }\n    return label;\n  };\n\n  Label.prototype.getFontColor = function (dataset, element, index) {\n    var fontColor = this.options.fontColor;\n    if (typeof fontColor === 'function') {\n      fontColor = fontColor({\n        label: this.chart.config.data.labels[index],\n        value: dataset.data[index],\n        percentage: this.getPercentage(dataset, element, index),\n        backgroundColor: dataset.backgroundColor[index],\n        dataset: dataset,\n        index: index\n      });\n    } else if (typeof fontColor !== 'string') {\n      fontColor = fontColor[index] || this.chart.config.options.defaultFontColor;\n    }\n    return fontColor;\n  };\n\n  Label.prototype.getPercentage = function (dataset, element, index) {\n    if (this.percentage !== null) {\n      return this.percentage;\n    }\n    var percentage;\n    if (this.chart.config.type === 'polarArea') {\n      if (this.total === null) {\n        this.total = 0;\n        for (var i = 0;i < dataset.data.length; ++i) {\n          this.total += dataset.data[i];\n        }\n      }\n      percentage = dataset.data[index] / this.total * 100;\n    } else if (this.chart.config.type === 'bar') {\n      if (this.barTotal[index] === undefined) {\n        this.barTotal[index] = 0;\n        for (var i = 0;i < this.chart.data.datasets.length; ++i) {\n          this.barTotal[index] += this.chart.data.datasets[i].data[index];\n        }\n      }\n      percentage = dataset.data[index] / this.barTotal[index] * 100;\n    } else {\n      percentage = element._view.circumference / this.chart.config.options.circumference * 100;\n    }\n    percentage = parseFloat(percentage.toFixed(this.options.precision));\n    if (!this.options.showActualPercentages) {\n      if (this.chart.config.type === 'bar') {\n        this.totalPercentage = this.barTotalPercentage[index] || 0;\n      }\n      this.totalPercentage += percentage;\n      if (this.totalPercentage > 100) {\n        percentage -= this.totalPercentage - 100;\n        percentage = parseFloat(percentage.toFixed(this.options.precision));\n      }\n      if (this.chart.config.type === 'bar') {\n        this.barTotalPercentage[index] = this.totalPercentage\n      }\n    }\n    this.percentage = percentage;\n    return percentage;\n  };\n\n  Label.prototype.getRenderInfo = function (element, label) {\n    if (this.chart.config.type === 'bar') {\n      return this.getBarRenderInfo(element, label);\n    } else {\n      return this.options.arc ? this.getArcRenderInfo(element, label) : this.getBaseRenderInfo(element, label);\n    }\n  };\n\n  Label.prototype.getBaseRenderInfo = function (element, label) {\n    if (this.options.position === 'outside' || this.options.position === 'border') {\n      var renderInfo, rangeFromCentre,\n        view = element._view,\n        centreAngle = view.startAngle + (view.endAngle - view.startAngle) / 2,\n        innerRadius = view.outerRadius / 2;\n      if (this.options.position === 'border') {\n        rangeFromCentre = (view.outerRadius - innerRadius) / 2 + innerRadius;\n      } else if (this.options.position === 'outside') {\n        rangeFromCentre = (view.outerRadius - innerRadius) + innerRadius + this.options.textMargin;\n      }\n      renderInfo = {\n        x: view.x + (Math.cos(centreAngle) * rangeFromCentre),\n        y: view.y + (Math.sin(centreAngle) * rangeFromCentre)\n      };\n      if (this.options.position === 'outside') {\n        var offset = this.options.textMargin + this.measureLabel(label).width / 2;\n        renderInfo.x += renderInfo.x < view.x ? -offset : offset;\n      }\n      return renderInfo;\n    } else {\n      return element.tooltipPosition();\n    }\n  };\n\n  Label.prototype.getArcRenderInfo = function (element, label) {\n    var radius, view = element._view;\n    if (this.options.position === 'outside') {\n      radius = view.outerRadius + this.options.fontSize + this.options.textMargin;\n    } else if (this.options.position === 'border') {\n      radius = (view.outerRadius / 2 + view.outerRadius) / 2;\n    } else {\n      radius = (view.innerRadius + view.outerRadius) / 2;\n    }\n    var startAngle = view.startAngle, endAngle = view.endAngle;\n    var totalAngle = endAngle - startAngle;\n    startAngle += Math.PI / 2;\n    endAngle += Math.PI / 2;\n    var mertrics = this.measureLabel(label);\n    startAngle += (endAngle - (mertrics.width / radius + startAngle)) / 2;\n    return {\n      radius: radius,\n      startAngle: startAngle,\n      endAngle: endAngle,\n      totalAngle: totalAngle,\n      view: view\n    }\n  };\n\n  Label.prototype.getBarRenderInfo = function (element, label) {\n    var renderInfo = element.tooltipPosition();\n    renderInfo.y -= this.measureLabel(label).height / 2 + this.options.textMargin;\n    return renderInfo;\n  };\n\n  Label.prototype.drawable = function (element, label, renderInfo) {\n    if (this.options.overlap) {\n      return true;\n    } else if (this.options.arc) {\n      return renderInfo.endAngle - renderInfo.startAngle <= renderInfo.totalAngle;\n    } else {\n      var mertrics = this.measureLabel(label),\n        left = renderInfo.x - mertrics.width / 2,\n        right = renderInfo.x + mertrics.width / 2,\n        top = renderInfo.y - mertrics.height / 2,\n        bottom = renderInfo.y + mertrics.height / 2;\n      if (this.options.renderInfo === 'outside') {\n        return this.outsideInRange(left, right, top, bottom);\n      } else {\n        return element.inRange(left, top) && element.inRange(left, bottom) &&\n          element.inRange(right, top) && element.inRange(right, bottom);\n      }\n    }\n  };\n\n  Label.prototype.outsideInRange = function (left, right, top, bottom) {\n    var labelBounds = this.labelBounds;\n    for (var i = 0;i < labelBounds.length;++i) {\n      var bound = labelBounds[i];\n      var potins = [\n        [left, top],\n        [left, bottom],\n        [right, top],\n        [right, bottom]\n      ];\n      for (var j = 0;j < potins.length;++j) {\n        var x = potins[j][0];\n        var y = potins[j][1];\n        if (x >= bound.left && x <= bound.right && y >= bound.top && y <= bound.bottom) {\n          return false;\n        }\n      }\n      potins = [\n        [bound.left, bound.top],\n        [bound.left, bound.bottom],\n        [bound.right, bound.top],\n        [bound.right, bound.bottom]\n      ];\n      for (var j = 0;j < potins.length;++j) {\n        var x = potins[j][0];\n        var y = potins[j][1];\n        if (x >= left && x <= right && y >= top && y <= bottom) {\n          return false;\n        }\n      }\n    }\n    labelBounds.push({\n      left: left,\n      right: right,\n      top: top,\n      bottom: bottom\n    });\n    return true;\n  };\n\n  Label.prototype.measureLabel = function (label) {\n    if (typeof label === 'object') {\n      return { width: label.width, height: label.height };\n    } else {\n      var width = 0;\n      var lines = label.split('\\n');\n      for (var i = 0; i < lines.length; ++i) {\n        var result = this.ctx.measureText(lines[i]);\n        if (result.width > width) {\n          width = result.width;\n        }\n      }\n      return { width: width, height: this.options.fontSize * lines.length };\n    }\n  };\n\n  Label.prototype.loadImage = function (obj) {\n    var image = new Image();\n    image.src = obj.src;\n    image.width = obj.width;\n    image.height = obj.height;\n    return image;\n  };\n\n  Chart.plugins.register({\n    id: 'labels',\n    beforeDatasetsUpdate: function (chart, options) {\n      if (!SUPPORTED_TYPES[chart.config.type]) {\n        return;\n      }\n      if (!Array.isArray(options)) {\n        options = [options];\n      }\n      var count = options.length;\n      if (!chart._labels || count !== chart._labels.length) {\n        chart._labels = options.map(function () {\n          return new Label();\n        });\n      }\n      var someOutside = false, maxPadding = 0;\n      for (var i = 0; i < count; ++i) {\n        var label = chart._labels[i];\n        label.setup(chart, options[i]);\n        if (label.options.position === 'outside') {\n          someOutside = true;\n          var padding = label.options.fontSize * 1.5 + label.options.outsidePadding;\n          if (padding > maxPadding) {\n            maxPadding = padding;\n          }\n        }\n      }\n      if (someOutside) {\n        chart.chartArea.top += maxPadding;\n        chart.chartArea.bottom -= maxPadding;\n      }\n    },\n    afterDatasetUpdate: function (chart, args, options) {\n      if (!SUPPORTED_TYPES[chart.config.type]) {\n        return;\n      }\n      chart._labels.forEach(function (label) {\n        label.args[args.index] = args;\n      });\n    },\n    beforeDraw: function (chart) {\n      if (!SUPPORTED_TYPES[chart.config.type]) {\n        return;\n      }\n      chart._labels.forEach(function (label) {\n        label.barTotalPercentage = {};\n      });\n    },\n    afterDatasetsDraw: function (chart) {\n      if (!SUPPORTED_TYPES[chart.config.type]) {\n        return;\n      }\n      chart._labels.forEach(function (label) {\n        label.render();\n      });\n    }\n  });\n})();\n","\n<button class=\"badge  btn btn-sm border-right float-right\" (click)=\"export('excel')\"><i class=\"fa fa-external-link\"></i> Excel</button>\n<button class=\"badge btn  btn-sm float-right mr-1\" (click)=\"export('csv')\"><i class=\"fa fa-external-link\"></i> CSV</button>\n\n<div class=\"chart-wrapper\">\n    <canvas \n      baseChart \n      class=\"chart\"\n      [data]=\"data\"\n      [labels]=\"labels\"\n      [chartType]=\"doughnutChartType\"\n      [options]=\"chartOptions\"\n      [colors] =\"colors\"\n      (chartHover)=\"chartHovered($event)\"\n      (chartClick)=\"chartClicked($event)\">\n    </canvas>\n\n  </div>","import { Component, OnInit, Input } from \"@angular/core\";\nimport \"chartjs-plugin-labels\";\nimport { ExcelService } from \"../../../../_services/excel.service\";\nimport { CustomTooltips } from \"@coreui/coreui-plugin-chartjs-custom-tooltips\";\n\n@Component({\n  selector: \"app-doughnut-chart\",\n  templateUrl: \"./doughnut-chart.component.html\",\n  styleUrls: [\"./doughnut-chart.component.scss\"],\n  host: { class: \"text-left\" }\n})\nexport class DoughnutChartComponent implements OnInit {\n  constructor(private excelService: ExcelService) {}\n  @Input() labels: string[] = [\"در حال استفاده\", \"آزاد\"];\n  @Input() data: number[] = [0, 100];\n  @Input() colors = [\n    {\n      backgroundColor: [\"#f86c6b\", \"rgba(228, 229, 230, 0.63)\"]\n    }\n  ];\n\n  public chartOptions: any = {\n    scaleShowVerticalLines: true,\n\n    barRoundness: 3,\n    legend: {\n      labels: {\n        fontFamily: \"IRANSans\",\n        fontColor: \"black\",\n        fontStyle: \"bold\"\n      }\n    },\n      tooltips: {\n        fontFamily: \"IRANSans\",\n        fontColor: \"black\",\n        fontStyle: \"bold\",\n        enabled: false,\n        custom: CustomTooltips,\n       \n      },\n \n\n    plugins: {\n      labels: {\n        render: \"percent\",\n        precision: 2,\n        arc: true\n      },\n      formatter: function(value) {\n        if (isNaN(value)) {\n          return \"\";\n        }\n        return value;\n      }\n    }\n  };\n  public doughnutChartType = \"doughnut\";\n\n  ngOnInit() {}\n\n  public chartClicked(e: any): void {\n    console.log(e);\n  }\n\n  public chartHovered(e: any): void {\n    console.log(e);\n  }\n  export(type: string = \"excel\") {\n    let data: any = [];\n\n    let labelDataPeer = [];\n\n    let tmpLineChartData = JSON.parse(JSON.stringify(this.data));\n    let record = {};\n    for (let index in this.labels) {\n      \n      record[this.labels[index].replace(/\\s/g, \"_\")] = this.data[index];\n    }\n    data.push(record);\n    this.exportAsXLSX(data, type);\n  }\n\n  exportAsXLSX(data, type: string = \"excel\"): void {\n    this.excelService.exportAsExcelFile(data, this.doughnutChartType, type);\n  }\n}\n","\n<button class=\"badge  btn btn-sm border-right float-right\" (click)=\"export('excel')\"><i class=\"fa fa-external-link\"></i> Excel</button>\n<button class=\"badge btn  btn-sm float-right mr-1\" (click)=\"export('csv')\"><i class=\"fa fa-external-link\"></i> CSV</button>\n\n  <div class=\"chart-wrapper mt-3 mx-3 \" >\n  \n    <canvas baseChart class=\"chart\"\n    [datasets]=\"datasets\"\n    [labels]=\"labels\"\n    [options]=\"options\"\n    [colors]=\"colors\"\n    [legend]=\"lineChartLegend\"\n    [chartType]=\"lineChartType\"\n    (chartHover)=\"chartHovered($event)\"\n    (chartClick)=\"chartClicked($event)\"></canvas>\n</div>","import { Component, OnInit, Input } from \"@angular/core\";\nimport { CustomTooltips } from \"@coreui/coreui-plugin-chartjs-custom-tooltips\";\nimport \"chartjs-plugin-labels\";\nimport { ExcelService } from \"../../../../_services/excel.service\";\n\n@Component({\n  selector: \"app-line-chart\",\n  templateUrl: \"./line-chart.component.html\",\n  styleUrls: [\"./line-chart.component.scss\"]\n})\nexport class LineChartComponent implements OnInit {\n  constructor(private excelService: ExcelService) {}\n  chartHsteps = 50;\n  @Input() isTimeChart = false;\n  \n \n\n\n  ngOnInit() {\n    \n   let isTimeChart = this.isTimeChart;\n    this.options = {\n      \n      responsive: true,\n      loneJoin: \"miter\",\n      bezierCurve: true,\n      elements: {\n        point: {\n          radius: 0\n        },\n        line: {\n          tension: 0\n        }\n      },\n      tooltips: {\n        fontFamily: \"IRANSans\",\n        fontColor: \"black\",\n        fontStyle: \"bold\",\n        enabled: false,\n        mode: \"index\",\n        custom: CustomTooltips,\n        intersect: false,\n        callbacks: {\n          label: function(tooltipItem, data) {\n            \n            var label = data.datasets[tooltipItem.datasetIndex].label || '';\n\n            if(isTimeChart)\n            return label+' : ' + new Date( tooltipItem.yLabel * 1000).toISOString().substr(11, 8);\n            else return label + ' ' + tooltipItem.yLabel;\n          }\n        }\n      },\n      hover: {\n        mode: \"nearest\",\n        intersect: true,\n        fontFamily: \"IRANSans\",\n        fontColor: \"black\",\n        fontStyle: \"bold\",\n        enabled: false,\n        custom: CustomTooltips,\n        callbacks: {\n          label: function(tooltipItem, data) {\n          \n            var label = data.datasets[tooltipItem.datasetIndex].label || \"\";\n\n            if (label) {\n              label += \": \";\n            }\n            label += isNaN(tooltipItem.yLabel) ? \"0\" : tooltipItem.yLabel;\n            return label;\n          }\n        }\n      },\n      legend: {\n        labels: { \n          fontFamily: 'IRANSans',\n          fontColor: 'black',\n          fontStyle: 'bold'\n        }\n      },\n      \n      plugins: {\n        labels: {\n          render: \"value\",\n          fontColor: [\"green\", \"white\", \"red\"],\n          precision: 2,\n          arc: true\n        },\n        formatter: function(value) {\n          if (isNaN(value)) {\n            return \"\";\n          }\n          return value;\n        }\n      },\n      scales: {\n        yAxes: [\n          {\n            id: \"left-y-axis\",\n            ticks: {\n              beginAtZero:true,\n              fontFamily: \"IRANSans\",\n              fontColor: \"black\",\n              fontSize: 13,\n              userCallback: function(item) {\n                if(isTimeChart)\n                return new Date(item * 1000).toISOString().substr(11, 8);\n                else return item;\n            },\n            }\n            \n          }\n        ],\n        xAxes : [\n          {\n            fontFamily: \"IRANSans\",\n            fontColor: \"black\",\n\n            ticks: {\n              beginAtZero:true,\n              stepSize: 0.5,\n              fontFamily: \"IRANSans\",\n              fontColor: \"black\",\n              fontSize: 13,\n            }\n          }\n        ]\n\n      },\n     \n    };\n    \n  }\n\n\n\n  exportAsXLSX(data, type: string = \"excel\"): void {\n    this.excelService.exportAsExcelFile(data, this.lineChartType, type);\n  }\n  public chartClicked(e: any): void {\n    console.log(e);\n  }\n\n  public chartHovered(e: any): void {\n    console.log(e);\n  }\n\n  @Input() datasets: Array<any> = [];\n  @Input() contentTitle: string = \"\";\n\n  export(type: string = \"excel\") {\n    let data: any = [];\n\n    data.push({\n      \"نام نمودار\": this.contentTitle\n    });\n\n    data.push({\n      labels: this.labels\n    });\n    let labelDataPeer = [];\n\n    let tmpLineChartData = JSON.parse(JSON.stringify(this.datasets));\n\n    for (let dataItem in this.labels) {\n      let record = {};\n      for (let index in tmpLineChartData) {\n        record[tmpLineChartData[index].label] = tmpLineChartData[index][\n          \"data\"\n        ].pop();\n      }\n      labelDataPeer.push(record);\n    }\n\n    for (let index in labelDataPeer) {\n      data.push(labelDataPeer[index]);\n    }\n\n    debugger;\n    this.exportAsXLSX(data, type);\n  }\n\n  lineChartMaxYAxes = 100;\n\n  @Input() labels: Array<any> = new Array(this.chartHsteps).fill(\"\");\n  public options: any ;\n  @Input() colors: Array<any> = [\n    {\n      //cpu\n      backgroundColor: \"rgba(255, 161, 181, 0.2)\",\n      borderColor: \"rgba(255, 161, 181, 0.4)\",\n      pointBackgroundColor: \"rgba(255, 161, 181, 0.4)\",\n      pointBorderColor: \"rgba(255, 161, 181, 0.4)\",\n      pointHoverBackgroundColor: \"rgba(255, 161, 181, 0.4)\",\n      pointHoverBorderColor: \"rgba(148,159,177,0.8)\"\n    },\n    {\n      // ram\n      backgroundColor: \"rgba(77, 189, 116, 0.2)\",\n      borderColor: \"rgba(77, 189, 116, 0.4)\",\n      pointBackgroundColor: \"rgba(77, 189, 116, 0.4)\",\n      pointBorderColor: \"rgba(77, 189, 116, 0.4)\",\n      pointHoverBackgroundColor: \"rgba(77, 189, 116, 0.4)\",\n      pointHoverBorderColor: \"rgba(148,159,177,0.8)\"\n    },\n    {\n      // swap\n      backgroundColor: \"rgba(255, 193, 7, 0.2)\",\n      borderColor: \"rgba(255, 193, 7, 0.4)\",\n      pointBackgroundColor: \"rgba(255, 193, 7, 0.4)\",\n      pointBorderColor: \"rgba(255, 193, 7, 0.4)\",\n      pointHoverBackgroundColor: \"rgba(255, 193, 7, 0.4)\",\n      pointHoverBorderColor: \"rgba(77,83,96,1)\"\n    },\n    {\n      // active\n      backgroundColor: \"rgba(32, 168, 216, 0.2)\",\n      borderColor: \"rgba(32, 168, 216, 0.4)\",\n      pointBackgroundColor: \"rgba(32, 168, 216, 0.4)\",\n      pointBorderColor: \"rgba(32, 168, 216, 0.4)\",\n      pointHoverBackgroundColor: \"rgba(32, 168, 216, 0.4)\",\n      pointHoverBorderColor: \"rgba(148,159,177,0.8)\"\n    }\n  ];\n  public lineChartLegend = true;\n  public lineChartType = \"line\";\n}\n"],"sourceRoot":""}